Assignment 2 R. Hayden Anderson


1. How many cost units are spent in the entire process of performing 16 consecutive push operations on an empty
array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is
added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for
resizing, what is the big-oh complexity for a push?
Cost units=8+(8+1)+7 = 24 units
Big O:
O(1+)


2. How many cost units are spent in the entire process of performing 16 consecutive push operations on an empty
array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new
item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy
for resizing, what is the big-oh complexity for a push?
Cost units=8+(8+1)+1+(10+1)+1+(12+1)+1+(14+1)+1 = 60 units
Big O:
O(n)

3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will
result in poor performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this?
(Hint: You may assume that the initial capacity of the array is N/2.)

push(struct DynamicArray *a, Type val){
if(DynamicArray->size=DynamicArray->capacity){
	struct DynamicArray newArray;
	for(int i=0;DynamicArray->size;i++){
		newArray->data[i]=DynamicArray->data[i];
	}
	DynamicArray->capacity=DynamicArray->capacity*2;
	for(int i=0;DynamicArray->size;i++){
		DynamicArray->data[i]=newArray->data[i];
	}
}
DynamicArray->data[size]=val;
}

pop(struct DynamicArray *a){
	size--;
	if(DynamicArray->size==DynamicArray->capacity/2){
		struct DynamicArray newArray;
		for(int i=0;DynamicArray->size;i++){
			newArray->data[i]=DynamicArray->data[i];
		}
		DynamicArray->capacity=DynamicArray->capacity/2;
		for(int i=0;DynamicArray->size;i++){
			DynamicArray->data[i]=newArray->data[i];
		}
	}
}

To not have Big-O(n^2), don't copy the array into a newArray and dont shrink the array any further
than its initial capacity n/2.  That way, you don't have to copy it over.  
